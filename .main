package main

import (
	"fmt"
	"github.com/RadicalApp/libsignal-protocol-go/serialize"
	"io"
	"io/ioutil"
	"log"
	"os"
	// "github.com/RadicalApp/libsignal-protocol-go/session"
	// "github.com/RadicalApp/libsignal-protocol-go/state/record"
	"github.com/RadicalApp/libsignal-protocol-go/util/keyhelper"
)

var (
	Trace   *log.Logger
	Info    *log.Logger
	Warning *log.Logger
	Error   *log.Logger
)

func Init(
	traceHandle io.Writer,
	infoHandle io.Writer,
	warningHandle io.Writer,
	errorHandle io.Writer) {

	Trace = log.New(traceHandle,
		"TRACE: ",
		log.Ldate|log.Ltime|log.Lshortfile)

	Info = log.New(infoHandle,
		"INFO: ",
		log.Ldate|log.Ltime|log.Lshortfile)

	Warning = log.New(warningHandle,
		"WARNING: ",
		log.Ldate|log.Ltime|log.Lshortfile)

	Error = log.New(errorHandle,
		"ERROR: ",
		log.Ldate|log.Ltime|log.Lshortfile)
}

func main() {
	Init(ioutil.Discard, os.Stdout, os.Stdout, os.Stderr)
	serializer := serialize.NewJSONSerializer()
	identityKeyPair, err := keyhelper.GenerateIdentityKeyPair()

	if err != nil {
		panic("Unable to generate identity key pair!")
	}

	registrationID := keyhelper.GenerateRegistrationID()
	// generate pre-keys
	preKeys, err := keyhelper.GeneratePreKeys(0, 100, serializer.PreKeyRecord)
	if err != nil {
		panic("Unable to generate pre keys")
	}

	// generate Signed PreKey
	signedPreKey, err := keyhelper.GenerateSignedPreKey(identityKeyPair, 0, serializer.SignedPreKeyRecord)
	if err != nil {
		panic("Unable to generate signed prekey!")
	}

	// sessionStore := NewSessionStore()

	Info.Println(preKeys)
	Trace.Println(identityKeyPair)
	fmt.Printf("%s", identityKeyPair)
	fmt.Printf("RegistrationID => %s", registrationID)
	Info.Println(signedPreKey)
	// fmt.Printf("hello there, Identity key : %s \n %s", identityKeyPair, serializer.PreKeyRecord)
	// fmt.Println("Hello, World!")
}
